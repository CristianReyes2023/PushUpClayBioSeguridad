// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(BioseguridadContext))]
    [Migration("20231211140535_FirstMigrations")]
    partial class FirstMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Addressclient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Bis")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("bis")
                        .IsFixedLength();

                    b.Property<string>("CardinalPrimario")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("cardinal_primario")
                        .IsFixedLength();

                    b.Property<string>("CardinalSecundario")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("cardinal_secundario")
                        .IsFixedLength();

                    b.Property<string>("Complemento")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("complemento");

                    b.Property<int>("IdClientFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTaddressFk")
                        .HasColumnType("int")
                        .HasColumnName("IdTAddressFk");

                    b.Property<string>("LetraPrincipal")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letra_principal")
                        .IsFixedLength();

                    b.Property<string>("LetraSecundaria")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letra_secundaria")
                        .IsFixedLength();

                    b.Property<short>("NumeroPrincipal")
                        .HasColumnType("smallint")
                        .HasColumnName("numero_principal");

                    b.Property<short>("NumeroSecundario")
                        .HasColumnType("smallint")
                        .HasColumnName("numero_secundario");

                    b.Property<string>("TipoVia")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_via");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdClientFk" }, "IdClientFk");

                    b.ToTable("addressclient", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Addressoffice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Bis")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("bis")
                        .IsFixedLength();

                    b.Property<string>("CardinalPrimario")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("cardinal_primario")
                        .IsFixedLength();

                    b.Property<string>("CardinalSecundario")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("cardinal_secundario")
                        .IsFixedLength();

                    b.Property<string>("Complemento")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("complemento");

                    b.Property<int>("IdEmployeeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTaddressFk")
                        .HasColumnType("int")
                        .HasColumnName("IdTAddressFk");

                    b.Property<string>("LetraPrincipal")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letra_principal")
                        .IsFixedLength();

                    b.Property<string>("LetraSecundaria")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letra_secundaria")
                        .IsFixedLength();

                    b.Property<short>("NumeroPrincipal")
                        .HasColumnType("smallint")
                        .HasColumnName("numero_principal");

                    b.Property<short>("NumeroSecundario")
                        .HasColumnType("smallint")
                        .HasColumnName("numero_secundario");

                    b.Property<string>("TipoVia")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_via");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEmployeeFk" }, "IdEmployeeFk");

                    b.ToTable("addressoffice", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdStateFk")
                        .HasColumnType("int");

                    b.Property<int?>("IdStateFkNavigationId")
                        .HasColumnType("int");

                    b.Property<string>("NameCity")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdStateFkNavigationId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdCityFk")
                        .HasColumnType("int");

                    b.Property<string>("IdClient")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IdTpersonFk")
                        .HasColumnType("int")
                        .HasColumnName("IdTPersonFk");

                    b.Property<string>("NameCliente")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCityFk" }, "IdCityFk");

                    b.HasIndex(new[] { "IdTpersonFk" }, "IdTPersonFk");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateContract")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Datefinal")
                        .HasColumnType("datetime")
                        .HasColumnName("DATEFINAL");

                    b.Property<int>("IdClientFk")
                        .HasColumnType("int");

                    b.Property<int>("IdEmployeeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdStateContractFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdClientFk" }, "IdClientFk")
                        .HasDatabaseName("IdClientFk1");

                    b.HasIndex(new[] { "IdEmployeeFk" }, "IdEmployeeFk")
                        .HasDatabaseName("IdEmployeeFk1");

                    b.HasIndex(new[] { "IdStateContractFk" }, "IdStateContractFk");

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NameCountry")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCityFk")
                        .HasColumnType("int");

                    b.Property<string>("IdEmployee")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdPositionFk")
                        .HasColumnType("int");

                    b.Property<string>("NameEmployee")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCityFk" }, "IdCityFk")
                        .HasDatabaseName("IdCityFk1");

                    b.HasIndex(new[] { "IdPositionFk" }, "IdPositionFk");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NamePosition")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Programming", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdContractFk")
                        .HasColumnType("int");

                    b.Property<int>("IdEmployeeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdTurnFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdContractFk" }, "IdContractFk");

                    b.HasIndex(new[] { "IdEmployeeFk" }, "IdEmployeeFk")
                        .HasDatabaseName("IdEmployeeFk2");

                    b.HasIndex(new[] { "IdTurnFk" }, "IdTurnFk");

                    b.ToTable("programming", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdCountryFk")
                        .HasColumnType("int");

                    b.Property<string>("NameState")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCountryFk" }, "IdCountryFk");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Statecontract", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("statecontract", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Turn", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("HourShiftFinally")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("HourShiftStart")
                        .HasColumnType("time");

                    b.Property<string>("NameTurns")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("turns", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Typeperson", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("typeperson", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Addressclient", b =>
                {
                    b.HasOne("Domain.Entities.Client", "IdClientFkNavigation")
                        .WithMany("Addressclients")
                        .HasForeignKey("IdClientFk")
                        .IsRequired()
                        .HasConstraintName("addressclient_ibfk_1");

                    b.Navigation("IdClientFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Addressoffice", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "IdEmployeeFkNavigation")
                        .WithMany("Addressoffices")
                        .HasForeignKey("IdEmployeeFk")
                        .IsRequired()
                        .HasConstraintName("addressoffice_ibfk_1");

                    b.Navigation("IdEmployeeFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.State", "IdStateFkNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdStateFkNavigationId");

                    b.Navigation("IdStateFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.City", "IdCityFkNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdCityFk")
                        .HasConstraintName("client_ibfk_1");

                    b.HasOne("Domain.Entities.Typeperson", "IdTpersonFkNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdTpersonFk")
                        .HasConstraintName("client_ibfk_2");

                    b.Navigation("IdCityFkNavigation");

                    b.Navigation("IdTpersonFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.HasOne("Domain.Entities.Client", "IdClientFkNavigation")
                        .WithMany("Contracts")
                        .HasForeignKey("IdClientFk")
                        .IsRequired()
                        .HasConstraintName("contract_ibfk_3");

                    b.HasOne("Domain.Entities.Employee", "IdEmployeeFkNavigation")
                        .WithMany("Contracts")
                        .HasForeignKey("IdEmployeeFk")
                        .IsRequired()
                        .HasConstraintName("contract_ibfk_2");

                    b.HasOne("Domain.Entities.Statecontract", "IdStateContractFkNavigation")
                        .WithMany("Contracts")
                        .HasForeignKey("IdStateContractFk")
                        .IsRequired()
                        .HasConstraintName("contract_ibfk_1");

                    b.Navigation("IdClientFkNavigation");

                    b.Navigation("IdEmployeeFkNavigation");

                    b.Navigation("IdStateContractFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.City", "IdCityFkNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdCityFk")
                        .IsRequired()
                        .HasConstraintName("employee_ibfk_1");

                    b.HasOne("Domain.Entities.Position", "IdPositionFkNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdPositionFk")
                        .IsRequired()
                        .HasConstraintName("employee_ibfk_2");

                    b.Navigation("IdCityFkNavigation");

                    b.Navigation("IdPositionFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Programming", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "IdContractFkNavigation")
                        .WithMany("Programmings")
                        .HasForeignKey("IdContractFk")
                        .IsRequired()
                        .HasConstraintName("programming_ibfk_1");

                    b.HasOne("Domain.Entities.Employee", "IdEmployeeFkNavigation")
                        .WithMany("Programmings")
                        .HasForeignKey("IdEmployeeFk")
                        .IsRequired()
                        .HasConstraintName("programming_ibfk_3");

                    b.HasOne("Domain.Entities.Turn", "IdTurnFkNavigation")
                        .WithMany("Programmings")
                        .HasForeignKey("IdTurnFk")
                        .IsRequired()
                        .HasConstraintName("programming_ibfk_2");

                    b.Navigation("IdContractFkNavigation");

                    b.Navigation("IdEmployeeFkNavigation");

                    b.Navigation("IdTurnFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.HasOne("Domain.Entities.Country", "IdCountryFkNavigation")
                        .WithMany("States")
                        .HasForeignKey("IdCountryFk")
                        .IsRequired()
                        .HasConstraintName("state_ibfk_1");

                    b.Navigation("IdCountryFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Addressclients");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Navigation("Programmings");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("Addressoffices");

                    b.Navigation("Contracts");

                    b.Navigation("Programmings");
                });

            modelBuilder.Entity("Domain.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Statecontract", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Turn", b =>
                {
                    b.Navigation("Programmings");
                });

            modelBuilder.Entity("Domain.Entities.Typeperson", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
